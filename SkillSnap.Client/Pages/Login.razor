@page "/login"
@inject NavigationManager Navigation
@inject IAuthService AuthService

@using SkillSnap.Client.Models
@using Microsoft.AspNetCore.Components.Forms

<h3 class="mb-3">üîê –í—Ö–æ–¥</h3>

@if (AuthService.IsAuthenticated)
{
    <div class="alert alert-success">–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ @AuthService.UserEmail</div>
    <button class="btn btn-outline-danger" @onclick="HandleLogout">–í—ã–π—Ç–∏</button>
}
else
{
    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Email:</label>
            <InputText @bind-Value="loginModel.Email" class="form-control" />
            <ValidationMessage For="@(() => loginModel.Email)" />
        </div>

        <div class="mb-3">
            <label>–ü–∞—Ä–æ–ª—å:</label>
            <InputText @bind-Value="loginModel.Password" type="password" class="form-control" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

        <button type="submit" class="btn btn-primary">–í–æ–π—Ç–∏</button>
    </EditForm>
}

@code {
    private LoginModel loginModel = new()
    {
        Email = string.Empty,
        Password = string.Empty
    };

    private string? errorMessage;

    private async Task HandleLogin()
    {
        var result = await AuthService.LoginAsync(loginModel);
        if (result)
        {
            Navigation.NavigateTo("/");
        }
        else
        {
            errorMessage = "‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.";
        }
    }

    private async Task HandleLogout()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/login", forceLoad: true);
    }
}




